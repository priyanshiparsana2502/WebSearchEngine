JavaScript Mistakes w3schools.com THE WORLD'S LARGEST WEB DEVELOPER SITE HTML CSS JAVASCRIPT SQL PYTHON PHP BOOTSTRAP HOW TO W3.CSS JQUERY JAVA MORE ? ? ? FORUM EXERCISES REFERENCES ? HTML and CSS Learn HTML Learn CSS Learn Bootstrap Learn W3.CSS Learn Colors Learn Icons Learn Graphics Learn SVG Learn Canvas Learn How To Learn Sass XML Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery JavaScript Learn JavaScript Learn jQuery Learn React Learn AngularJS Learn JSON Learn AJAX Learn W3.JS Programming Learn Python Learn Java Learn C++ Learn C# Learn Machine Learning Server Side Learn SQL Learn PHP Learn ASP Learn Node.js Learn Raspberry Pi Web Building Web Templates Web Statistics Web Certificates Web Editor Web Development Test Your Typing Speed XML Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery ? HTML HTML Tag Reference HTML Browser Support HTML Event Reference HTML Color Reference HTML Attribute Reference HTML Canvas Reference HTML SVG Reference HTML Character Sets Google Maps Reference CSS CSS Reference CSS Browser Support CSS Selector Reference Bootstrap 3 Reference Bootstrap 4 Reference W3.CSS Reference Icon Reference Sass Reference JavaScript JavaScript Reference HTML DOM Reference jQuery Reference AngularJS Reference W3.JS Reference Programming Python Reference Java Reference Server Side SQL Reference PHP Reference ASP Reference XML XML Reference XML Http Reference XSLT Reference XML Schema Reference Character Sets HTML Character Sets HTML ASCII HTML ANSI HTML Windows-1252 HTML ISO-8859-1 HTML Symbols HTML UTF-8 ? Exercises HTML Exercises CSS Exercises JavaScript Exercises SQL Exercises PHP Exercises Python Exercises jQuery Exercises Bootstrap Exercises Java Exercises C++ Exercises C# Exercises Quizzes HTML Quiz CSS Quiz JavaScript Quiz SQL Quiz PHP Quiz Python Quiz jQuery Quiz Bootstrap Quiz Java Quiz C++ Quiz C# Quiz XML Quiz Certificates HTML Certificate CSS Certificate JavaScript Certificate SQL Certificate PHP Certificate Python Certificate jQuery Certificate Bootstrap Certificate XML Certificate JS Tutorial JS HOME JS Introduction JS Where To JS Output JS Statements JS Syntax JS Comments JS Variables JS Operators JS Arithmetic JS Assignment JS Data Types JS Functions JS Objects JS Events JS Strings JS String Methods JS Numbers JS Number Methods JS Arrays JS Array Methods JS Array Sort JS Array Iteration JS Dates JS Date Formats JS Date Get Methods JS Date Set Methods JS Math JS Random JS Booleans JS Comparisons JS Conditions JS Switch JS Loop For JS Loop While JS Break JS Type Conversion JS Bitwise JS RegExp JS Errors JS Scope JS Hoisting JS Strict Mode JS this Keyword JS Let JS Const JS Arrow Function JS Classes JS Debugging JS Style Guide JS Best Practices JS Mistakes JS Performance JS Reserved Words JS Versions JS Version ES5 JS Version ES6 JS JSON JS Forms JS Forms Forms API JS Objects Object Definitions Object Properties Object Methods Object Display Object Accessors Object Constructors Object Prototypes Object ECMAScript 5 JS Functions Function Definitions Function Parameters Function Invocation Function Call Function Apply Function Closures JS HTML DOM DOM Intro DOM Methods DOM Document DOM Elements DOM HTML DOM CSS DOM Animations DOM Events DOM Event Listener DOM Navigation DOM Nodes DOM Collections DOM Node Lists JS Browser BOM JS Window JS Screen JS Location JS History JS Navigator JS Popup Alert JS Timing JS Cookies JS AJAX AJAX Intro AJAX XMLHttp AJAX Request AJAX Response AJAX XML File AJAX PHP AJAX ASP AJAX Database AJAX Applications AJAX Examples JS JSON JSON Intro JSON Syntax JSON vs XML JSON Data Types JSON Parse JSON Stringify JSON Objects JSON Arrays JSON PHP JSON HTML JSON JSONP JS vs jQuery jQuery Selectors jQuery HTML jQuery CSS jQuery DOM JS Examples JS Examples JS HTML DOM JS HTML Input JS HTML Objects JS HTML Events JS Browser JS Exercises JS Quiz JS Certificate JS References JavaScript Objects HTML DOM Objects JavaScript Common Mistakes ? Previous Next ? This chapter points out some common JavaScript mistakes. Accidentally Using the Assignment Operator JavaScript programs may generate unexpected results if a programmer accidentally uses an assignment operator (=), instead of a comparison operator (==) in an if statement. This if statement returns false (as expected) because x is not equal to 10: var x = 0; if (x == 10) Try it Yourself ? This if statement returns true (maybe not as expected), because 10 is true: var x = 0; if (x = 10) Try it Yourself ? This if statement returns false (maybe not as expected), because 0 is false: var x = 0; if (x = 0) Try it Yourself ? An assignment always returns the value of the assignment. Expecting Loose Comparison In regular comparison, data type does not matter. This if statement returns true: var x = 10; var y = "10"; if (x == y) Try it Yourself ? In strict comparison, data type does matter. This if statement returns false: var x = 10; var y = "10"; if (x === y) Try it Yourself ? It is a common mistake to forget that switch statements use strict comparison: This case switch will display an alert: var x = 10; switch(x) { case 10: alert("Hello"); } Try it Yourself ? This case switch will not display an alert: var x = 10; switch(x) { case "10": alert("Hello"); } Try it Yourself ? Confusing Addition & Concatenation Addition is about adding numbers. Concatenation is about adding strings. In JavaScript both operations use the same + operator. Because of this, adding a number as a number will produce a different result from adding a number as a string: var x = 10 + 5; // the result in x is 15 var x = 10 + "5"; // the result in x is "105" Try it Yourself ? When adding two variables, it can be difficult to anticipate the result: var x = 10; var y = 5; var z = x + y; // the result in z is 15 var x = 10; var y = "5"; var z = x + y; // the result in z is "105" Try it Yourself ? Misunderstanding Floats All numbers in JavaScript are stored as 64-bits Floating point numbers (Floats). All programming languages, including JavaScript, have difficulties with precise floating point values: var x = 0.1; var y = 0.2; var z = x + y // the result in z will not be 0.3 Try it Yourself ? To solve the problem above, it helps to multiply and divide: Example var z = (x * 10 + y * 10) / 10; // z will be 0.3 Try it Yourself ? Breaking a JavaScript String JavaScript will allow you to break a statement into two lines: Example 1 var x = "Hello World!"; Try it Yourself ? But, breaking a statement in the middle of a string will not work: Example 2 var x = "Hello World!"; Try it Yourself ? You must use a "backslash" if you must break a statement in a string: Example 3 var x = "Hello \ World!"; Try it Yourself ? Misplacing Semicolon Because of a misplaced semicolon, this code block will execute regardless of the value of x: if (x == 19); { // code block } Try it Yourself ? Breaking a Return Statement It is a default JavaScript behavior to close a statement automatically at the end of a line. Because of this, these two examples will return the same result: Example 1 function myFunction(a) { var power = 10 return a * power } Try it Yourself ? Example 2 function myFunction(a) { var power = 10; return a * power; } Try it Yourself ? JavaScript will also allow you to break a statement into two lines. Because of this, example 3 will also return the same result: Example 3 function myFunction(a) { var power = 10; return a * power; } Try it Yourself ? But, what will happen if you break the return statement in two lines like this: Example 4 function myFunction(a) { var power = 10; return a * power; } Try it Yourself ? The function will return undefined! Why? Because JavaScript thought you meant: Example 5 function myFunction(a) { var power = 10; return; a * power; } Try it Yourself ? Explanation If a statement is incomplete like: var JavaScript will try to complete the statement by reading the next line: power = 10; But since this statement is complete: return JavaScript will automatically close it like this: return; This happens because closing (ending) statements with semicolon is optional in JavaScript. JavaScript will close the return statement at the end of the line, because it is a complete statement. Never break a return statement. Accessing Arrays with Named Indexes Many programming languages support arrays with named indexes. Arrays with named indexes are called associative arrays (or hashes). JavaScript does not support arrays with named indexes. In JavaScript, arrays use numbered indexes: Example var person = []; person[0] = "John"; person[1] = "Doe"; person[2] = 46; var x = person.length; // person.length will return 3 var y = person[0]; // person[0] will return "John" Try it Yourself ? In JavaScript, objects use named indexes. If you use a named index, when accessing an array, JavaScript will redefine the array to a standard object. After the automatic redefinition, array methods and properties will produce undefined or incorrect results: Example: var person = []; person["firstName"] = "John"; person["lastName"] = "Doe"; person["age"] = 46; var x = person.length; // person.length will return 0 var y = person[0]; // person[0] will return undefined Try it Yourself ? Ending Definitions with a Comma Trailing commas in object and array definition are legal in ECMAScript 5. Object Example: person = {firstName:"John", lastName:"Doe", age:46,} Array Example: points = [40, 100, 1, 5, 25, 10,]; WARNING !! Internet Explorer 8 will crash. JSON does not allow trailing commas. JSON: person = {"firstName":"John", "lastName":"Doe", "age":46} JSON: points = [40, 100, 1, 5, 25, 10]; Undefined is Not Null JavaScript objects, variables, properties, and methods can be undefined. In addition, empty JavaScript objects can have the value null. This can make it a little bit difficult to test if an object is empty. You can test if an object exists by testing if the type is undefined: Example: if (typeof myObj === "undefined") Try it Yourself ? But you cannot test if an object is null, because this will throw an error if the object is undefined: Incorrect: if (myObj === null) To solve this problem, you must test if an object is not null, and not undefined. But this can still throw an error: Incorrect: if (myObj !== null && typeof myObj !== "undefined") Because of this, you must test for not undefined before you can test for not null: Correct: if (typeof myObj !== "undefined" && myObj !== null) Try it Yourself ? ? Previous Next ? COLOR PICKER HOW TO Tabs Dropdowns Accordions Side Navigation Top Navigation Modal Boxes Progress Bars Parallax Login Form HTML Includes Google Maps Range Sliders Tooltips Slideshow Filter List Sort List SHARE CERTIFICATES HTML CSS JavaScript SQL Python PHP jQuery Bootstrap XML Read More ? REPORT ERROR PRINT PAGE FORUM ABOUT ? Report Error If you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail: help@w3schools.com ? Thank You For Helping Us! Your message has been sent to W3Schools. Top Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial SQL Tutorial Python Tutorial W3.CSS Tutorial Bootstrap Tutorial PHP Tutorial jQuery Tutorial Java Tutorial C++ Tutorial Top References HTML Reference CSS Reference JavaScript Reference SQL Reference Python Reference W3.CSS Reference Bootstrap Reference PHP Reference HTML Colors jQuery Reference Java Reference Angular Reference Top Examples HTML Examples CSS Examples JavaScript Examples How To Examples SQL Examples Python Examples W3.CSS Examples Bootstrap Examples PHP Examples jQuery Examples Java Examples XML Examples Web Certificates HTML Certificate CSS Certificate JavaScript Certificate SQL Certificate Python Certificate jQuery Certificate PHP Certificate Bootstrap Certificate XML Certificate Get Certified ? W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using this site, you agree to have read and accepted our terms of use, cookie and privacy policy. Copyright 1999-2020 by Refsnes Data. All Rights Reserved. Powered by W3.CSS.
