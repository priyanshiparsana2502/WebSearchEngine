JavaScript Numbers w3schools.com THE WORLD'S LARGEST WEB DEVELOPER SITE HTML CSS JAVASCRIPT SQL PYTHON PHP BOOTSTRAP HOW TO W3.CSS JQUERY JAVA MORE ? ? ? FORUM EXERCISES REFERENCES ? HTML and CSS Learn HTML Learn CSS Learn Bootstrap Learn W3.CSS Learn Colors Learn Icons Learn Graphics Learn SVG Learn Canvas Learn How To Learn Sass XML Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery JavaScript Learn JavaScript Learn jQuery Learn React Learn AngularJS Learn JSON Learn AJAX Learn W3.JS Programming Learn Python Learn Java Learn C++ Learn C# Learn Machine Learning Server Side Learn SQL Learn PHP Learn ASP Learn Node.js Learn Raspberry Pi Web Building Web Templates Web Statistics Web Certificates Web Editor Web Development Test Your Typing Speed XML Learn XML Learn XML AJAX Learn XML DOM Learn XML DTD Learn XML Schema Learn XSLT Learn XPath Learn XQuery ? HTML HTML Tag Reference HTML Browser Support HTML Event Reference HTML Color Reference HTML Attribute Reference HTML Canvas Reference HTML SVG Reference HTML Character Sets Google Maps Reference CSS CSS Reference CSS Browser Support CSS Selector Reference Bootstrap 3 Reference Bootstrap 4 Reference W3.CSS Reference Icon Reference Sass Reference JavaScript JavaScript Reference HTML DOM Reference jQuery Reference AngularJS Reference W3.JS Reference Programming Python Reference Java Reference Server Side SQL Reference PHP Reference ASP Reference XML XML Reference XML Http Reference XSLT Reference XML Schema Reference Character Sets HTML Character Sets HTML ASCII HTML ANSI HTML Windows-1252 HTML ISO-8859-1 HTML Symbols HTML UTF-8 ? Exercises HTML Exercises CSS Exercises JavaScript Exercises SQL Exercises PHP Exercises Python Exercises jQuery Exercises Bootstrap Exercises Java Exercises C++ Exercises C# Exercises Quizzes HTML Quiz CSS Quiz JavaScript Quiz SQL Quiz PHP Quiz Python Quiz jQuery Quiz Bootstrap Quiz Java Quiz C++ Quiz C# Quiz XML Quiz Certificates HTML Certificate CSS Certificate JavaScript Certificate SQL Certificate PHP Certificate Python Certificate jQuery Certificate Bootstrap Certificate XML Certificate JS Tutorial JS HOME JS Introduction JS Where To JS Output JS Statements JS Syntax JS Comments JS Variables JS Operators JS Arithmetic JS Assignment JS Data Types JS Functions JS Objects JS Events JS Strings JS String Methods JS Numbers JS Number Methods JS Arrays JS Array Methods JS Array Sort JS Array Iteration JS Dates JS Date Formats JS Date Get Methods JS Date Set Methods JS Math JS Random JS Booleans JS Comparisons JS Conditions JS Switch JS Loop For JS Loop While JS Break JS Type Conversion JS Bitwise JS RegExp JS Errors JS Scope JS Hoisting JS Strict Mode JS this Keyword JS Let JS Const JS Arrow Function JS Classes JS Debugging JS Style Guide JS Best Practices JS Mistakes JS Performance JS Reserved Words JS Versions JS Version ES5 JS Version ES6 JS JSON JS Forms JS Forms Forms API JS Objects Object Definitions Object Properties Object Methods Object Display Object Accessors Object Constructors Object Prototypes Object ECMAScript 5 JS Functions Function Definitions Function Parameters Function Invocation Function Call Function Apply Function Closures JS HTML DOM DOM Intro DOM Methods DOM Document DOM Elements DOM HTML DOM CSS DOM Animations DOM Events DOM Event Listener DOM Navigation DOM Nodes DOM Collections DOM Node Lists JS Browser BOM JS Window JS Screen JS Location JS History JS Navigator JS Popup Alert JS Timing JS Cookies JS AJAX AJAX Intro AJAX XMLHttp AJAX Request AJAX Response AJAX XML File AJAX PHP AJAX ASP AJAX Database AJAX Applications AJAX Examples JS JSON JSON Intro JSON Syntax JSON vs XML JSON Data Types JSON Parse JSON Stringify JSON Objects JSON Arrays JSON PHP JSON HTML JSON JSONP JS vs jQuery jQuery Selectors jQuery HTML jQuery CSS jQuery DOM JS Examples JS Examples JS HTML DOM JS HTML Input JS HTML Objects JS HTML Events JS Browser JS Exercises JS Quiz JS Certificate JS References JavaScript Objects HTML DOM Objects JavaScript Numbers ? Previous Next ? JavaScript has only one type of number. Numbers can be written with or without decimals. Example var x = 3.14; // A number with decimals var y = 3; // A number without decimals Try it yourself ? Extra large or extra small numbers can be written with scientific (exponent) notation: Example var x = 123e5; // 12300000 var y = 123e-5; // 0.00123 Try it yourself ? JavaScript Numbers are Always 64-bit Floating Point Unlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc. JavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard. This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63: Value (aka Fraction/Mantissa) Exponent Sign 52 bits (0 - 51) 11 bits (52 - 62) 1 bit (63) Precision Integers (numbers without a period or exponent notation) are accurate up to 15 digits. Example var x = 999999999999999; // x will be 999999999999999 var y = 9999999999999999; // y will be 10000000000000000 Try it Yourself ? The maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate: Example var x = 0.2 + 0.1; // x will be 0.30000000000000004 Try it yourself ? To solve the problem above, it helps to multiply and divide: Example var x = (0.2 * 10 + 0.1 * 10) / 10; // x will be 0.3 Try it Yourself ? Adding Numbers and Strings WARNING !! JavaScript uses the + operator for both addition and concatenation. Numbers are added. Strings are concatenated. If you add two numbers, the result will be a number: Example var x = 10; var y = 20; var z = x + y; // z will be 30 (a number) Try it Yourself ? If you add two strings, the result will be a string concatenation: Example var x = "10"; var y = "20"; var z = x + y; // z will be 1020 (a string) Try it Yourself ? If you add a number and a string, the result will be a string concatenation: Example var x = 10; var y = "20"; var z = x + y; // z will be 1020 (a string) Try it Yourself ? If you add a string and a number, the result will be a string concatenation: Example var x = "10"; var y = 20; var z = x + y; // z will be 1020 (a string) Try it Yourself ? A common mistake is to expect this result to be 30: Example var x = 10; var y = 20; var z = "The result is: " + x + y; Try it Yourself ? A common mistake is to expect this result to be 102030: Example var x = 10; var y = 20; var z = "30"; var result = x + y + z; Try it Yourself ? The JavaScript interpreter works from left to right. First 10 + 20 is added because x and y are both numbers. Then 30 + "30" is concatenated because z is a string. Numeric Strings JavaScript strings can have numeric content: var x = 100; // x is a number var y = "100"; // y is a string JavaScript will try to convert strings to numbers in all numeric operations: This will work: var x = "100"; var y = "10"; var z = x / y; // z will be 10 Try it Yourself ? This will also work: var x = "100"; var y = "10"; var z = x * y; // z will be 1000 Try it Yourself ? And this will work: var x = "100"; var y = "10"; var z = x - y; // z will be 90 Try it Yourself ? But this will not work: var x = "100"; var y = "10"; var z = x + y; // z will not be 110 (It will be 10010) Try it Yourself ? In the last example JavaScript uses the + operator to concatenate the strings. NaN - Not a Number NaN is a JavaScript reserved word indicating that a number is not a legal number. Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number): Example var x = 100 / "Apple"; // x will be NaN (Not a Number) Try it Yourself ? However, if the string contains a numeric value , the result will be a number: Example var x = 100 / "10"; // x will be 10 Try it Yourself ? You can use the global JavaScript function isNaN() to find out if a value is a number: Example var x = 100 / "Apple"; isNaN(x); // returns true because x is Not a Number Try it Yourself ? Watch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN: Example var x = NaN; var y = 5; var z = x + y; // z will be NaN Try it Yourself ? Or the result might be a concatenation: Example var x = NaN; var y = "5"; var z = x + y; // z will be NaN5 Try it Yourself ? NaN is a number: typeof NaN returns number: Example typeof NaN; // returns "number" Try it Yourself ? Infinity Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number. Example var myNumber = 2; while (myNumber != Infinity) { // Execute until Infinity myNumber = myNumber * myNumber; } Try it yourself ? Division by 0 (zero) also generates Infinity: Example var x = 2 / 0; // x will be Infinity var y = -2 / 0; // y will be -Infinity Try it Yourself ? Infinity is a number: typeof Infinity returns number. Example typeof Infinity; // returns "number" Try it Yourself ? Hexadecimal JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x. Example var x = 0xFF; // x will be 255 Try it Yourself ? Never write a number with a leading zero (like 07). Some JavaScript versions interpret numbers as octal if they are written with a leading zero. By default, JavaScript displays numbers as base 10 decimals. But you can use the toString() method to output numbers from base 2 to base 36. Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2. Example var myNumber = 32; myNumber.toString(10); // returns 32 myNumber.toString(32); // returns 10 myNumber.toString(16); // returns 20 myNumber.toString(8); // returns 40 myNumber.toString(2); // returns 100000 Try it Yourself ? Numbers Can be Objects Normally JavaScript numbers are primitive values created from literals: var x = 123; But numbers can also be defined as objects with the keyword new: var y = new Number(123); Example var x = 123; var y = new Number(123); // typeof x returns number // typeof y returns object Try it yourself ? Do not create Number objects. It slows down execution speed. The new keyword complicates the code. This can produce some unexpected results: When using the == operator, equal numbers are equal: Example var x = 500; var y = new Number(500); // (x == y) is true because x and y have equal values Try it Yourself ? When using the === operator, equal numbers are not equal, because the === operator expects equality in both type and value. Example var x = 500; var y = new Number(500); // (x === y) is false because x and y have different types Try it Yourself ? Or even worse. Objects cannot be compared: Example var x = new Number(500); var y = new Number(500); // (x == y) is false because objects cannot be compared Try it Yourself ? Note the difference between (x==y) and (x===y). Comparing two JavaScript objects will always return false. ? Previous Next ? COLOR PICKER HOW TO Tabs Dropdowns Accordions Side Navigation Top Navigation Modal Boxes Progress Bars Parallax Login Form HTML Includes Google Maps Range Sliders Tooltips Slideshow Filter List Sort List SHARE CERTIFICATES HTML CSS JavaScript SQL Python PHP jQuery Bootstrap XML Read More ? REPORT ERROR PRINT PAGE FORUM ABOUT ? Report Error If you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail: help@w3schools.com ? Thank You For Helping Us! Your message has been sent to W3Schools. Top Tutorials HTML Tutorial CSS Tutorial JavaScript Tutorial How To Tutorial SQL Tutorial Python Tutorial W3.CSS Tutorial Bootstrap Tutorial PHP Tutorial jQuery Tutorial Java Tutorial C++ Tutorial Top References HTML Reference CSS Reference JavaScript Reference SQL Reference Python Reference W3.CSS Reference Bootstrap Reference PHP Reference HTML Colors jQuery Reference Java Reference Angular Reference Top Examples HTML Examples CSS Examples JavaScript Examples How To Examples SQL Examples Python Examples W3.CSS Examples Bootstrap Examples PHP Examples jQuery Examples Java Examples XML Examples Web Certificates HTML Certificate CSS Certificate JavaScript Certificate SQL Certificate Python Certificate jQuery Certificate PHP Certificate Bootstrap Certificate XML Certificate Get Certified ? W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using this site, you agree to have read and accepted our terms of use, cookie and privacy policy. Copyright 1999-2020 by Refsnes Data. All Rights Reserved. Powered by W3.CSS.
